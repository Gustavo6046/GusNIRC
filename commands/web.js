// Generated by CoffeeScript 1.12.6
var Crawler, irc;

irc = require("../irc.js");

Crawler = require("crawler");

module.exports = [
  {
    name: "pipecrawl",
    matcher: new irc.PrefixedMatcher("pipecrawl (\\d+) (.+)"),
    perform: function(msg, custom, conn) {
      var c, i, len, m, maxconn, numConn, pipeCmd, ref, results, u, urls;
      maxconn = Math.min(+custom[0], 35);
      urls = custom[1].split("|")[0].split(" ").filter(function(x) {
        return x !== "";
      });
      pipeCmd = custom[1].split("|")[1].split(" ").filter(function(x) {
        return x !== "";
      }).join(" ");
      console.log("Crawling for websites: " + (urls.join(", ")));
      msg.reply("Crawling for websites: " + (urls.join(", ")));
      numConn = 0;
      c = new Crawler({
        maxConnections: 5,
        retries: 0,
        callback: function(error, res, done) {
          var err;
          try {
            if (error) {
              msg.reply("[ERR] [pipecrawl] " + res.request.uri.href + " - " + error);
              console.log(error);
            } else if (res.statusCode !== 200) {
              msg.reply("[ERR] [pipecrawl] " + res.request.uri.href + " - Status code " + res.statusCode + ".");
              console.log(error);
            } else {
              process.stdout.write("(EMULATED) ");
              conn.received(":" + msg.data.privmsg.host + " PRIVMSG " + msg.data.privmsg.channel + " :]=" + (pipeCmd.replace("%u", res.request.uri.href)) + "\r\n");
            }
            res.$("a").each(function(_, u) {
              var m, ref;
              u = u.attribs.href;
              if (u == null) {
                return;
              }
              if (!u.startsWith("http://") && !u.startsWith("http://")) {
                m = u.match(/^(([a-z][a-z1-9\-\+\.]+\:\/\/)?)(.+)/i).slice(1);
                if (m != null) {
                  if ((ref = m[0]) !== "http://" && ref !== "https://" && ref !== "") {
                    msg.reply("[ERR] [pipecrawl] " + u + " - Invalid protocol: " + m[0] + " (expected 'http://', 'https://' or default 'http://')");
                    return;
                  }
                  if (m[0] === "") {
                    u = res.request.uri.href + "/" + m[2];
                  }
                }
              }
              if (numConn < maxconn) {
                c.queue(u);
              }
              console.log(numConn, maxconn);
              return numConn++;
            });
          } catch (error1) {
            err = error1;
            msg.reply("[ERR] [pipecrawl] " + res.options.uri + " - " + err);
          }
          return done();
        }
      });
      results = [];
      for (i = 0, len = urls.length; i < len; i++) {
        u = urls[i];
        if (!u.startsWith("http://") && !u.startsWith("http://")) {
          m = u.match(/^(([a-z][a-z1-9\-\+\.]+\:\/\/)?)(.+)/i).slice(1);
          if ((m != null) && ((ref = m[0]) !== "http" && ref !== "")) {
            msg.reply("[ERR] [pipecrawl] " + u + " - Invalid protocol: " + m[0] + " (expected 'http', 'https' or default 'http')");
            continue;
          }
          u = "http://" + m[2];
        }
        results.push(c.queue(u));
      }
      return results;
    }
  }
];
