// Generated by CoffeeScript 1.12.6
var addTrans, irc, tq, trans, translateLoop,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

irc = require("../irc.js");

trans = require("node-google-translate-skidz");

tq = [];

addTrans = function(text, lang, source) {
  return new Promise(function(resolve, reject) {
    return tq.push([
      2500, function() {
        return new Promise(function(finish) {
          if (source == null) {
            source = "auto";
          }
          return trans({
            text: text,
            source: source,
            target: lang
          }, (function(translation) {
            resolve(translation);
            return finish();
          }));
        });
      }
    ]);
  });
};

translateLoop = function() {
  var tf;
  tf = tq[0];
  if (tf == null) {
    return setTimeout(translateLoop, 300);
  }
  tq = tq.slice(1);
  return tf[1]().then(function() {
    return setTimeout(translateLoop, tf[0]);
  });
};

translateLoop();

module.exports = [
  {
    name: "gt.to",
    matcher: new irc.PrefixedMatcher("gt :([^ ]+) (.+)"),
    perform: function(msg, custom, conn) {
      return addTrans(custom[1], custom[0]).then(function(translation) {
        return msg.reply(msg.data.privmsg.nickname + ": '" + translation.translation + "' (" + translation.ld_result.srclangs[0] + " to " + custom[0] + " with " + (translation.ld_result.srclangs_confidences[0] * 100) + "% confidence)");
      });
    }
  }, {
    name: "gt.from+to",
    matcher: new irc.PrefixedMatcher("gt ([^ ]+):([^ ]+) (.+)"),
    perform: function(msg, custom, conn) {
      return addTrans(custom[2], custom[1], custom[0]).then(function(translation) {
        return msg.reply(msg.data.privmsg.nickname + ": '" + translation.translation + "' (" + custom[0] + " to " + custom[1] + " with " + (translation.ld_result.srclangs_confidences[0] * 100) + "% confidence)");
      });
    }
  }, {
    name: "gt.from",
    matcher: new irc.PrefixedMatcher("gt ([^ ]+): (.+)"),
    perform: function(msg, custom, conn) {
      return addTrans(custom[1], "en", custom[0]).then(function(translation) {
        return msg.reply(msg.data.privmsg.nickname + ": '" + translation.translation + "' (" + custom[0] + " to en with " + (translation.ld_result.srclangs_confidences[0] * 100) + "% confidence)");
      });
    }
  }, {
    name: "gt.auto",
    matcher: new irc.PrefixedMatcher("gt : (.+)"),
    perform: function(msg, custom, conn) {
      return addTrans(custom[0], "en").then(function(translation) {
        return msg.reply(msg.data.privmsg.nickname + ": '" + translation.translation + "' (" + translation.ld_result.srclangs[0] + " to en with " + (translation.ld_result.srclangs_confidences[0] * 100) + "% confidence)");
      });
    }
  }, {
    name: "gt.mangle",
    matcher: new irc.PrefixedMatcher("mangle(\\d+) (.+)"),
    perform: function(msg, custom, conn) {
      var mangle, nm, past;
      nm = Math.min(parseInt(custom[0]), 50);
      past = [custom[1]];
      mangle = function(data) {
        if (data == null) {
          data = custom[1];
        }
        return new Promise(function(resolve) {
          return addTrans(data, "hu").then(function(trans) {
            return addTrans(trans.translation, "en").then(function(trans) {
              var ref;
              nm--;
              if (nm <= 0 || (ref = trans.translation, indexOf.call(past, ref) >= 0)) {
                console.dir(trans);
                console.log(past);
                return resolve(trans.translation);
              } else {
                console.log(nm + " mangles left.");
                past.push(trans.translation);
                return mangle(trans.translation).then(resolve);
              }
            });
          });
        });
      };
      return mangle().then(function(data) {
        return msg.reply(msg.data.privmsg.nickname + ": '" + data + "'");
      });
    }
  }
];
