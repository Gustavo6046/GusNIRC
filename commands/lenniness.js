// Generated by CoffeeScript 1.12.6
var addLennyWord, addNonLennyWord, calcLenny, dice_coefficient, fs, irc, lw, nlw,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

irc = require("../irc.js");

fs = require("fs");

dice_coefficient = function(string1, string2) {
  var bigram1, bigrams2, i, intersection, j, length1, length2;
  intersection = 0;
  length1 = string1.length - 1;
  length2 = string2.length - 1;
  if (length1 < 1 || length2 < 1) {
    return 0;
  }
  bigrams2 = [];
  i = 0;
  while (i < length2) {
    bigrams2.push(string2.substr(i, 2));
    i++;
  }
  i = 0;
  while (i < length1) {
    bigram1 = string1.substr(i, 2);
    j = 0;
    while (j < length2) {
      if (bigram1 === bigrams2[j]) {
        intersection++;
        bigrams2[j] = null;
        break;
      }
      j++;
    }
    i++;
  }
  return 2.0 * intersection / (length1 + length2);
};

lw = fs.readFileSync("lenny.txt", {
  encoding: "utf-8"
}).split(' ');

nlw = fs.readFileSync("nonlenny.txt", {
  encoding: "utf-8"
}).split(' ');

addLennyWord = function(w) {
  var k, len, ref, wd;
  ref = w.split(' ');
  for (k = 0, len = ref.length; k < len; k++) {
    wd = ref[k];
    if (indexOf.call(lw, wd) < 0) {
      lw.push(wd);
    }
  }
  return fs.writeFileSync("lenny.txt", lw.join(" "));
};

addNonLennyWord = function(w) {
  var k, len, ref, wd;
  ref = w.split(' ');
  for (k = 0, len = ref.length; k < len; k++) {
    wd = ref[k];
    if (indexOf.call(nlw, wd) < 0) {
      nlw.push(wd);
    }
  }
  return fs.writeFileSync("nonlenny.txt", nlw.join(" "));
};

calcLenny = function(sentence, confidence, boredom) {
  var avg, k, l, le, len, len1, len2, m, maxVal, nle, w, words;
  if (confidence == null) {
    confidence = 2;
  }
  if (boredom == null) {
    boredom = 1.8;
  }
  words = sentence.replace(/[.,-=+!?*\(\)\[\]\{\}]/gi, "").toUpperCase().split(' ').filter(function(x) {
    return x !== "";
  });
  if (words.length < 1) {
    return 0;
  }
  avg = [];
  maxVal = Math.pow(10 * confidence, 2) / (10 * confidence);
  for (k = 0, len = words.length; k < len; k++) {
    w = words[k];
    for (l = 0, len1 = lw.length; l < len1; l++) {
      le = lw[l];
      avg.push(Math.pow(dice_coefficient(w, le.toUpperCase()) * 10 * confidence, 2) / (10 * confidence));
    }
    for (m = 0, len2 = nlw.length; m < len2; m++) {
      nle = nlw[m];
      avg.push(Math.pow(dice_coefficient(w, nle.toUpperCase()) * 10 * confidence, 2) / (10 * confidence * boredom));
    }
  }
  return avg.reduce(function(a, b) {
    return a + b;
  }) / avg.length;
};

module.exports = [
  {
    name: "addLenny",
    matcher: new irc.PrefixedMatcher("lenny is (.+)"),
    perform: function(msg, custom, conn) {
      addLennyWord(custom[0]);
      return msg.reply("Lenny words added succesfully.");
    }
  }, {
    name: "addNotLenny",
    matcher: new irc.PrefixedMatcher("lenny isnt (.+)"),
    perform: function(msg, custom, conn) {
      addNonLennyWord(custom[0]);
      return msg.reply("Non-Lenny words added succesfully.");
    }
  }, {
    name: "calcLenny",
    matcher: new irc.PrefixedMatcher("lenny calc (.+)"),
    perform: function(msg, custom, conn) {
      return msg.reply("That sentence is " + (Math.round(calcLenny(custom[0], 3) * 100, 4)) + "% lenny!");
    }
  }
];
